{"version":3,"sources":["actions/unitActions.js","reducers/selectionReducer.js","actions/optionActions.js","reducers/optionReducer.js","actions/convertActions.js","conversion/unitConversion.js","reducers/conversionReducer.js","store/store.js","components/dropdown.js","components/options.js","components/control.js","components/interact.js","components/convert.js","serviceWorker.js","index.js"],"names":["TEMP","lengthAction","type","weigthAction","tempAction","selectionDefault","unitClass","FROMINCH","FROMFEET","TOINCH","TOFEET","TOMETER","TOGRAM","TOOUNCE","TOPOUND","fromMillimeterAction","val","counterUnit","options","fromCentimeterAction","fromInchAction","fromFeetAction","fromMeterAction","fromKilometerAction","toMillimeterAction","toCentimeterAction","toInchAction","toFeetAction","toMeterAction","toKilometerAction","fromFahrenheitAction","fromCelsiusAction","fromKelvinAction","toFahrenheitAction","toCelsiusAction","toKelvinAction","fromMilligramAction","fromGramAction","fromOunceAction","fromPoundAction","fromKilogramAction","toMilligramAction","toGramAction","toOunceAction","toPoundAction","toKilogramAction","initializeLength","fromUnit","fromUnitOptions","toUnit","toUnitOptions","initializeWeight","initializeTemp","fromAssignState","stateValue","actionValue","Object","assign","toAssignState","errorValues","NaN","convertAction","event","from_Unit","to_Unit","data","includes","target","value","resetAction","lengthList","weightList","tempList","unitSymbols","fromMillimeter","fromCentimeter","fromInch","fromFeet","fromMeter","fromKilometer","toMillimeter","toCentimeter","toInch","toFeet","toMeter","toKilometer","fromMilligram","fromGram","fromOunce","fromPound","fromKilogram","toMilligram","toGram","toOunce","toPound","toKilogram","fromFahrenheit","fromCelsius","fromKelvin","toFahrenheit","toCelsius","toKelvin","lengthConversionValues","weightConversionValues","convert","number","unitFrom","unitTo","convertLength","convertWeight","convertTemp","evaluate","anObject","rawInput","changeInput","inputValue","Math","abs","parseFloat","toString","console","log","input","endsWith","length","match","output","fromSymbol","toSymbol","conversionDefault","store","createStore","combineReducers","select","state","action","Unit","option","OA","fromArgs","toArgs","window","__REDUX_DEVTOOLS_EXTENSION__","Dropdown","unitValues","props","convertFromMillimeter","convertFromCentimeter","convertFromInch","convertFromFeet","convertFromMeter","convertFromKiloMeter","convertToMillimeter","convertToCentimeter","convertToInch","convertToFeet","convertToMeter","convertToKiloMeter","convertFromFahrenheit","convertFromCelsius","convertFromKelvin","convertToFahrenheit","convertToCelsius","convertToKelvin","convertFromMillgram","convertFromGram","convertFromOunce","convertFromPound","convertFromKilogram","convertToMillgram","convertToGram","convertToOunce","convertToPound","convertToKilogram","classValue","this","side","className","label","choice","map","item","id","key","onClick","React","Component","connect","dispatch","bindActionCreators","Option","aria-hidden","Button","callback","tabIndex","style","Control","lengthValue","selectLength","weightValue","selectWeight","tempValue","selectTemp","Interact","min","onChange","reset","Convert","title","href","rel","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.32faac5a.chunk.js","sourcesContent":["\n// Unit Action types\nexport const LENGTH = 'length';\nexport const WEIGHT = 'weight';\nexport const TEMP   = 'tempreature';\n\n// Unit Action creators\nexport const lengthAction = ()=>{return {type:LENGTH}};\nexport const weigthAction = ()=>{return {type: WEIGHT}};\nexport const tempAction   = ()=>{return {type: TEMP}};\n","import * as Unit from './../actions/unitActions.js';\n\nconst selectionDefault = {unitClass: ['active','','']};\n\n// Reducer for the Control Component\nexport default function unitSelectionReducer(state = selectionDefault, action){\n\n  switch (action.type) {\n    case Unit.LENGTH:\n      return {unitClass: ['active','','']}\n    case Unit.WEIGHT:\n      return {unitClass: ['','active','']}\n    case Unit.TEMP:\n      return {unitClass: ['','','active']}\n    default:\n      return state;\n  }\n}\n","\n// length action types\nexport const FROMMILLIMETER = 'fromMillimeter';\nexport const FROMCENTIMETER = 'fromCentimeter';\nexport const FROMINCH       = 'fromInch';\nexport const FROMFEET       = 'fromFeet';\nexport const FROMMETER      = 'fromMeter';\nexport const FROMKILOMETER  = 'fromKilometer';\n\nexport const TOMILLIMETER   = 'toMillimeter';\nexport const TOCENTIMETER   = 'toCentimeter';\nexport const TOINCH         = 'toInch';\nexport const TOFEET         = 'toFeet';\nexport const TOMETER        = 'toMeter';\nexport const TOKILOMETER    = 'toKilometer';\n// Temperature action types\nexport const FROMFAHRENHEIT = 'fromFahrenheit';\nexport const FROMCELSIUS    = 'fromCelsius';\nexport const FROMKELVIN     = 'fromKelvin';\n\nexport const TOFAHRENHEIT   = 'toFahrenheit';\nexport const TOCELSIUS      = 'toCelsius';\nexport const TOKELVIN       = 'toKelvin';\n// Weight action Types\nexport const FROMMILLIGRAM  = 'fromMilligram';\nexport const FROMGRAM       = 'fromGram';\nexport const FROMOUNCE      = 'fromOunce';\nexport const FROMPOUND      = 'fromPound';\nexport const FROMKILOGRAM   = 'fromKilogram';\n\nexport const TOMILLIGRAM  = 'toMilligram';\nexport const TOGRAM       = 'toGram';\nexport const TOOUNCE      = 'toOunce';\nexport const TOPOUND      = 'toPound';\nexport const TOKILOGRAM   = 'toKilogram';\n\n// Length Action Creators\nexport const fromMillimeterAction = (val)=>{return{\n        counterUnit: val, type: FROMMILLIMETER,\n        options:[FROMCENTIMETER,FROMINCH,FROMFEET,FROMMETER,FROMKILOMETER]\n      }};\nexport const fromCentimeterAction = (val)=>{return{\n        counterUnit: val, type: FROMCENTIMETER,\n        options:[FROMMILLIMETER,FROMINCH,FROMFEET,FROMMETER,FROMKILOMETER]\n      }};\nexport const fromInchAction = (val)=>{return{ counterUnit: val, type: FROMINCH,\n        options:[FROMMILLIMETER,FROMCENTIMETER,FROMFEET,FROMMETER,FROMKILOMETER]\n      }};\nexport const fromFeetAction = (val)=>{return{ counterUnit: val, type: FROMFEET,\n        options:[FROMMILLIMETER,FROMCENTIMETER,FROMINCH,FROMMETER,FROMKILOMETER]\n      }};\nexport const fromMeterAction = (val)=>{return{ counterUnit: val, type: FROMMETER,\n        options:[FROMMILLIMETER,FROMCENTIMETER,FROMINCH,FROMFEET,FROMKILOMETER]\n      }};\nexport const fromKilometerAction = (val)=>{return{\n        counterUnit: val, type: FROMKILOMETER,\n        options:[FROMMILLIMETER,FROMCENTIMETER,FROMINCH,FROMFEET,FROMMETER]\n      }};\n\nexport const toMillimeterAction = (val)=>{return{\n        counterUnit: val, type: TOMILLIMETER,\n        options:[TOCENTIMETER,TOINCH,TOFEET,TOMETER,TOKILOMETER]\n      }};\nexport const toCentimeterAction = (val)=>{return{\n        counterUnit: val, type: TOCENTIMETER,\n        options:[TOMILLIMETER ,TOINCH,TOFEET,TOMETER,TOKILOMETER]\n      }};\nexport const toInchAction = (val)=>{return{ counterUnit: val, type: TOINCH,\n        options:[TOMILLIMETER ,TOCENTIMETER,TOFEET,TOMETER,TOKILOMETER]\n      }};\nexport const toFeetAction = (val)=>{return{ counterUnit: val, type: TOFEET,\n        options:[TOMILLIMETER ,TOCENTIMETER,TOINCH,TOMETER,TOKILOMETER]\n      }};\nexport const toMeterAction = (val)=>{return{ counterUnit: val, type: TOMETER,\n        options:[TOMILLIMETER ,TOCENTIMETER,TOINCH,TOFEET,TOKILOMETER]\n      }};\nexport const toKilometerAction = (val)=>{return{\n        counterUnit: val, type: TOKILOMETER,\n        options:[TOMILLIMETER ,TOCENTIMETER,TOINCH,TOFEET,TOMETER]\n      }};\n\n// Temperature actions creators\nexport const fromFahrenheitAction = (val)=>{return{\n        counterUnit: val, type: FROMFAHRENHEIT, options:[FROMCELSIUS,FROMKELVIN]\n      }};\nexport const fromCelsiusAction = (val)=>{return{\n        counterUnit: val, type: FROMCELSIUS, options:[FROMFAHRENHEIT,FROMKELVIN]\n      }};\nexport const fromKelvinAction = (val)=>{return{\n        counterUnit: val, type: FROMKELVIN, options:[FROMFAHRENHEIT,FROMCELSIUS]\n      }};\n\nexport const toFahrenheitAction = (val)=>{return{\n        counterUnit: val, type: TOFAHRENHEIT, options:[TOCELSIUS,TOKELVIN]\n      }};\nexport const toCelsiusAction = (val)=>{return{\n        counterUnit: val, type: TOCELSIUS, options:[TOFAHRENHEIT,TOKELVIN]\n      }};\nexport const toKelvinAction = (val)=>{return{\n        counterUnit: val, type: TOKELVIN, options:[TOFAHRENHEIT,TOCELSIUS]\n      }};\n\n// Weight actions creators\nexport const fromMilligramAction = (val)=>{return {\n        counterUnit: val, type:FROMMILLIGRAM,\n        options: [FROMGRAM, FROMOUNCE, FROMPOUND, FROMKILOGRAM]\n      }};\nexport const fromGramAction = (val)=>{return { counterUnit: val, type:FROMGRAM,\n        options: [FROMMILLIGRAM, FROMOUNCE, FROMPOUND, FROMKILOGRAM]\n      }};\nexport const fromOunceAction = (val)=>{return { counterUnit: val, type: FROMOUNCE,\n        options: [FROMMILLIGRAM, FROMGRAM, FROMPOUND, FROMKILOGRAM]\n      }};\nexport const fromPoundAction = (val)=>{return { counterUnit: val, type: FROMPOUND,\n        options: [FROMMILLIGRAM, FROMGRAM, FROMOUNCE, FROMKILOGRAM]\n      }};\nexport const fromKilogramAction = (val)=>{return {\n        counterUnit: val, type: FROMKILOGRAM,\n        options: [FROMMILLIGRAM, FROMGRAM, FROMOUNCE, FROMPOUND]\n      }};\n\nexport const toMilligramAction = (val)=>{return {\n        counterUnit: val, type:TOMILLIGRAM,\n        options: [TOGRAM, TOOUNCE, TOPOUND, TOKILOGRAM]\n      }};\nexport const toGramAction = (val)=>{return { counterUnit: val, type:TOGRAM,\n        options: [TOMILLIGRAM, TOOUNCE, TOPOUND, TOKILOGRAM]\n      }};\nexport const toOunceAction = (val)=>{return { counterUnit: val, type: TOOUNCE,\n        options: [TOMILLIGRAM, TOGRAM, TOPOUND, TOKILOGRAM]\n      }};\nexport const toPoundAction = (val)=>{return { counterUnit: val, type: TOPOUND,\n        options: [TOMILLIGRAM, TOGRAM, TOOUNCE, TOKILOGRAM]\n      }};\nexport const toKilogramAction = (val)=>{return { counterUnit: val, type: TOKILOGRAM,\n        options: [TOMILLIGRAM, TOGRAM, TOOUNCE, TOPOUND]\n      }};\n\n// Option Length initial state value\nexport const initializeLength = {\n    fromUnit: FROMMILLIMETER,\n    fromUnitOptions: [FROMCENTIMETER, FROMINCH, FROMFEET, FROMMETER, FROMKILOMETER],\n    toUnit: TOCENTIMETER,\n    toUnitOptions: [TOMILLIMETER, TOINCH, TOFEET, TOMETER, TOKILOMETER]\n};\n\n// Option Weight initial state value\nexport const initializeWeight = {\n    fromUnit: FROMMILLIGRAM,\n    fromUnitOptions: [ FROMGRAM, FROMOUNCE, FROMPOUND, FROMKILOGRAM],\n    toUnit: TOGRAM,\n    toUnitOptions: [ TOMILLIGRAM, TOOUNCE, TOPOUND, TOKILOGRAM]\n};\n// Option Temperature initial state value\nexport const initializeTemp = {\n    fromUnit: FROMFAHRENHEIT,\n    fromUnitOptions: [ FROMCELSIUS, FROMKELVIN],\n    toUnit: TOCELSIUS,\n    toUnitOptions: [ TOFAHRENHEIT, TOKELVIN]\n};\n","import * as Unit from './../actions/unitActions.js';\nimport * as OA from './../actions/optionActions.js';\n\n// Setting state for units to convert from\nconst fromAssignState = (stateValue, actionValue)=>{\n  return Object.assign(\n          {},stateValue, {fromUnit: actionValue.type, fromUnitOptions: actionValue.options}\n        );\n      };\n\n// Setting state for units to convert to\nconst toAssignState = (stateValue, actionValue)=>{\n  return Object.assign(\n          {},stateValue, {toUnit: actionValue.type, toUnitOptions: actionValue.options}\n        );\n      };\n\n// Reducer for Option Component\nexport default function conversionOptionReducer(state = OA.initializeLength, action){\n  switch (action.type) {\n    case Unit.LENGTH:\n      return OA.initializeLength;\n    case Unit.WEIGHT:\n      return OA.initializeWeight;\n    case Unit.TEMP:\n      return OA.initializeTemp;\n    case OA.FROMMILLIMETER:\n      return fromAssignState(state,action);\n    case OA.TOMILLIMETER:\n      return toAssignState(state,action);\n    case OA.FROMCENTIMETER:\n      return fromAssignState(state,action);\n    case OA.TOCENTIMETER:\n      return toAssignState(state,action);\n    case OA.FROMINCH:\n      return fromAssignState(state,action);\n    case OA.TOINCH:\n      return toAssignState(state,action);\n    case OA.FROMFEET:\n      return fromAssignState(state,action);\n    case OA.TOFEET:\n      return toAssignState(state,action);\n    case OA.FROMMETER:\n      return fromAssignState(state,action);\n    case OA.TOMETER:\n      return toAssignState(state,action);\n    case OA.FROMKILOMETER:\n      return fromAssignState(state,action);\n    case OA.TOKILOMETER:\n      return toAssignState(state,action);\n    case OA.FROMFAHRENHEIT:\n      return fromAssignState(state,action);\n    case OA.TOFAHRENHEIT:\n      return toAssignState(state,action);\n    case OA.FROMCELSIUS:\n      return fromAssignState(state,action);\n    case OA.TOCELSIUS:\n      return toAssignState(state,action);\n    case OA.FROMKELVIN:\n      return fromAssignState(state,action);\n    case OA.TOKELVIN:\n      return toAssignState(state,action);\n    case OA.FROMMILLIGRAM:\n      return fromAssignState(state,action);\n    case OA.TOMILLIGRAM:\n      return toAssignState(state,action);\n    case OA.FROMGRAM:\n      return fromAssignState(state,action);\n    case OA.TOGRAM:\n      return toAssignState(state,action);\n    case OA.FROMOUNCE:\n      return fromAssignState(state,action);\n    case OA.TOOUNCE:\n      return toAssignState(state,action);\n    case OA.FROMPOUND:\n      return fromAssignState(state,action);\n    case OA.TOPOUND:\n      return toAssignState(state,action);\n    case OA.FROMKILOGRAM:\n      return fromAssignState(state,action);\n    case OA.TOKILOGRAM:\n      return toAssignState(state,action);\n    default:\n      return state;\n  }\n}\n","\n// Convert Action type\nexport const CONVERT = 'CONVERT_INPUT';\nexport const RESET   = 'RESET';\n\n\n// Possible Error values list\nconst errorValues = ['', null, NaN, 'na', 'nan','Na'];\n\n// Convert Action Creator\nexport function convertAction(event,from_Unit,to_Unit){\n    var inputValue = ( errorValues.includes(event.target.value))? 0 : event.target.value;\n   return {\n     type: CONVERT,\n     data: inputValue,\n     fromUnit: from_Unit,\n     toUnit: to_Unit\n   }\n }\n\nexport const resetAction = ()=>{ return {type: RESET }};\n","\n// List of Units to convert from\nconst lengthList = ['fromMillimeter', 'fromCentimeter','fromInch','fromFeet','fromMeter','fromKilometer'];\nconst weightList = ['fromMilligram', 'fromGram','fromOunce', 'fromPound','fromKilogram'];\nconst tempList = ['fromFahrenheit',  'fromCelsius','fromKelvin'];\nconst unitSymbols = {\n  fromMillimeter:'mm', fromCentimeter: 'cm', fromInch: 'in',fromFeet: 'ft',\n  fromMeter:'m', fromKilometer: 'km', toMillimeter:'mm', toCentimeter: 'cm',\n  toInch: 'in',toFeet: 'ft', toMeter:'m', toKilometer: 'km',\n  fromMilligram: 'mg', fromGram: 'g', fromOunce: 'oz', fromPound: 'lb',\n  fromKilogram: 'kg', toMilligram: 'mg', toGram: 'g', toOunce: 'oz', toPound: 'lb',\n  toKilogram: 'kg', fromFahrenheit: '°F', fromCelsius: '°C', fromKelvin: '°K',\n  toFahrenheit: '°F', toCelsius: '°C', toKelvin: '°K'\n};\n\n// Conversion values for length units\nconst lengthConversionValues = {\n  'fromMillimeter': { toMillimeter: 1, toCentimeter: 0.01, toInch:0.0393700787,\n                      toFeet:0.0032808399, toMeter:0.001, toKilometer:0.000001\n                    },\n  'fromCentimeter': { toMillimeter: 10, toCentimeter: 1, toInch:0.3937007874,\n                      toFeet:0.032808399, toMeter:0.01, toKilometer:0.00001\n                    },\n  'fromInch':       { toMillimeter: 25.4, toCentimeter: 2.54, toInch: 1,\n                      toFeet: 0.0833333333, toMeter: 0.0254,toKilometer:0.0000254\n                    },\n  'fromFeet':       { toMillimeter: 304.8,  toCentimeter:30.48,toInch:12, toFeet:1,\n                      toMeter: 0.3048, toKilometer:0.0003048\n                    },\n  'fromMeter':      { toMillimeter: 1000, toCentimeter: 100, toInch: 39.3700787402,\n                      toFeet:3.280839895, toMeter: 1, toKilometer:0.001\n                    },\n  'fromKilometer':  { toMillimeter: 1000000, toCentimeter: 100000,\n                      toInch: 39370.078740157, toFeet: 3280.8398950131,\n                      toMeter: 1000, toKilometer: 1\n                    }\n};\n\n// Conversion values for Weight units\nconst weightConversionValues = {\n  'fromMilligram': { toMilligram: 1, toGram: 1.0e-3, toOunce: 3.5274e-5,\n                     toPound: 2.2046226218488e-6, toKilogram: 1.0e-6\n                   },\n  'fromGram':      { toMilligram:1.0e3 , toGram: 1, toOunce:3.52739619e-2,\n                     toPound: 2.2046226e-3, toKilogram:1.0e-3\n                   },\n  'fromOunce':     { toMilligram: 28349.523125, toGram:28.349523125, toOunce: 1,\n                     toPound: 6.25e-2, toKilogram: 2.83495231e-2\n                   },\n  'fromPound':     { toMilligram: 453592.37, toGram:4.5359237e2 , toOunce: 16,\n                     toPound: 1, toKilogram:4.5359237e-1\n                   },\n  'fromKilogram':  { toMilligram: 1.0e6, toGram:1.0e3 , toOunce:35.2739619496,\n                     toPound: 2.2046226218, toKilogram: 1\n                   }\n};\n\n// Convert length given a number, a Unit from and Unit to.\nconst convertLength = (number, unitFrom, unitTo)=>{\n  return (number * lengthConversionValues[unitFrom][unitTo])\n};\n\n// Convert Weight given a number, a Unit from and Unit to.\nconst convertWeight = (number, unitFrom, unitTo)=>{\n  return (number * weightConversionValues[unitFrom][unitTo])\n};\n\n// Convert Temperature given a number, a Unit from and Unit to.\nfunction convertTemp(number, unitFrom, unitTo){\n  var result ;\n  switch (unitFrom) {\n    case 'fromFahrenheit':\n      result = (unitTo === 'toCelsius')? ((5/9) * (number - 32)):\n                  (unitTo === 'toKelvin')? ((5/9) * (number + 459.67)):\n                    (unitTo === 'toFahrenheit')? number : 'NAN';\n      return result;\n    case 'fromCelsius':\n      result = (unitTo === 'toFahrenheit')? ((9/5) * number + 32):\n                  (unitTo === 'toKelvin')? (273.15 +  number):\n                      (unitTo === 'toCelsius')? number : 'NAN';\n      return result;\n    case 'fromKelvin':\n      result = (unitTo === 'toFahrenheit')? ((9/5) * number - 459.67):\n                  (unitTo === 'toCelsius')? (number - 273.15):\n                      (unitTo === 'toKelvin')? number : 'NAN';\n\n      return result;\n    default:\n      return 'NAN';\n  }\n}\n\n// Validate input as an int or float number\nexport function validateInput(rawInput, changeInput){\n return (\n   (rawInput.endsWith('.') && (changeInput.toString()).length === (rawInput.length -1) &&\n    (rawInput.match(/[.][0-9]*[.]/) === null)) ? rawInput :\n        (rawInput.endsWith('0') && rawInput.includes('.'))? rawInput :\n            (rawInput === null)? 0 : changeInput\n )\n}\n\n// Convert all unit in application\nexport function convert(number, unitFrom, unitTo){\n  return(\n    (lengthList.includes(unitFrom))? convertLength(number, unitFrom, unitTo):\n                    (weightList.includes(unitFrom))? convertWeight(number, unitFrom, unitTo):\n                        (tempList.includes(unitFrom))? convertTemp(number, unitFrom, unitTo): ''\n  )\n}\n\n\n// Evaluate, and validate input then convert to new unit\nexport function evaluate(anObject){\n  var inputValue = Math.abs(parseFloat(anObject.data.toString()));\n  console.log('Mod input: '+ inputValue);\n  return {\n    input: validateInput( anObject.data.toString(), inputValue),\n    output: convert(inputValue, anObject.fromUnit, anObject.toUnit ),\n    fromSymbol: unitSymbols[anObject.fromUnit], toSymbol: unitSymbols[anObject.toUnit]\n  };\n}\n","import * as Unit from './../actions/unitActions.js';\nimport * as OA from './../actions/optionActions.js';\nimport {CONVERT, RESET} from './../actions/convertActions.js';\nimport {evaluate} from './../conversion/unitConversion.js';\n\n\n// The default and initialing value for the Interact component and states\nconst conversionDefault = {input: 0, output: 0, fromSymbol: 'mm', toSymbol: 'cm'};\n\n// Reducer connected to the Interact component and states\nexport default function convertReducer(state= conversionDefault, action){\n\n  var fromArgs = {data: state.input, fromUnit: action.type, toUnit: action.counterUnit };\n  var toArgs = {data: state.input, fromUnit: action.counterUnit, toUnit: action.type };\n\n  switch (action.type) {\n    case Unit.LENGTH :\n      return {input: 0, output: 0, fromSymbol: 'mm', toSymbol: 'cm'};\n    case Unit.WEIGHT :\n      return {input: 0, output: 0, fromSymbol: 'mg', toSymbol: 'g '};\n    case Unit.TEMP:\n      return {input: 0, output: 0, fromSymbol: '°F', toSymbol: '°C'};\n    case CONVERT:\n      return evaluate(action);\n    case RESET:\n      return {input: 0, output: 0, fromSymbol: state.fromSymbol, toSymbol: state.toSymbol};\n    case OA.FROMMILLIMETER:\n      return evaluate(fromArgs);\n    case OA.TOMILLIMETER:\n      return evaluate(toArgs);\n    case OA.FROMCENTIMETER:\n      return evaluate(fromArgs);\n    case OA.TOCENTIMETER:\n      return evaluate(toArgs);\n    case OA.FROMINCH:\n      return evaluate(fromArgs);\n    case OA.TOINCH:\n      return evaluate(toArgs);\n    case OA.FROMFEET:\n      return evaluate(fromArgs);\n    case OA.TOFEET:\n      return evaluate(toArgs);\n    case OA.FROMMETER:\n      return evaluate(fromArgs);\n    case OA.TOMETER:\n      return evaluate(toArgs);\n    case OA.FROMKILOMETER:\n      return evaluate(fromArgs);\n    case OA.TOKILOMETER:\n      return evaluate(toArgs);\n    case OA.FROMFAHRENHEIT:\n      return evaluate(fromArgs);\n    case OA.TOFAHRENHEIT:\n      return evaluate(toArgs);\n    case OA.FROMCELSIUS:\n      return evaluate(fromArgs);\n    case OA.TOCELSIUS:\n      return evaluate(toArgs);\n    case OA.FROMKELVIN:\n      return evaluate(fromArgs);\n    case OA.TOKELVIN:\n      return evaluate(toArgs);\n    case OA.FROMMILLIGRAM:\n      return evaluate(fromArgs);\n    case OA.TOMILLIGRAM:\n      return evaluate(toArgs);\n    case OA.FROMGRAM:\n      return evaluate(fromArgs);\n    case OA.TOGRAM:\n      return evaluate(toArgs);\n    case OA.FROMOUNCE:\n      return evaluate(fromArgs);\n    case OA.TOOUNCE:\n      return evaluate(toArgs);\n    case OA.FROMPOUND:\n      return evaluate(fromArgs);\n    case OA.TOPOUND:\n      return evaluate(toArgs);\n    case OA.FROMKILOGRAM:\n      return evaluate(fromArgs);\n    case OA.TOKILOGRAM:\n      return evaluate(toArgs);\n    default:\n      return state;\n  }\n}\n","import { createStore, combineReducers} from 'redux';\nimport unitSelectionReducer from './../reducers/selectionReducer.js';\nimport conversionOptionReducer from './../reducers/optionReducer.js';\nimport convertReducer from './../reducers/conversionReducer.js';\n\nexport const store = createStore(  combineReducers({\n    select: unitSelectionReducer,\n    option: conversionOptionReducer,\n    convert: convertReducer\n  }),\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n","import React from 'react';\nimport {connect} from 'react-redux';\nimport * as OA from './../actions/optionActions.js';\nimport {bindActionCreators} from 'redux';\n\n// Dropdown menu component with unit option\nclass Dropdown extends React.Component{\n  render(){\n    const unitValues = {\n      'fromMillimeter': ['Millimeter',()=>this.props.convertFromMillimeter(this.props.counterUnit),'fmm'],\n      'fromCentimeter': ['Centimeter', ()=>this.props.convertFromCentimeter(this.props.counterUnit),'fcm'],\n      'fromInch': ['Inch', ()=>this.props.convertFromInch(this.props.counterUnit),'fin'],\n      'fromFeet': ['Feet', ()=>this.props.convertFromFeet(this.props.counterUnit),'fft'],\n      'fromMeter': ['Meter', ()=>this.props.convertFromMeter(this.props.counterUnit),'fmt'],\n      'fromKilometer': ['Kilometer', ()=>this.props.convertFromKiloMeter(this.props.counterUnit),'fkm'],\n\n      'toMillimeter': ['Millimeter',()=>this.props.convertToMillimeter(this.props.counterUnit),'tmm'],\n      'toCentimeter': ['Centimeter', ()=>this.props.convertToCentimeter(this.props.counterUnit),'tcm'],\n      'toInch': ['Inch', ()=>this.props.convertToInch(this.props.counterUnit),'tin'],\n      'toFeet': ['Feet', ()=>this.props.convertToFeet(this.props.counterUnit),'tft'],\n      'toMeter': ['Meter', ()=>this.props.convertToMeter(this.props.counterUnit),'tmt'],\n      'toKilometer': ['Kilometer', ()=>this.props.convertToKiloMeter(this.props.counterUnit),'tkm'],\n\n      'fromFahrenheit': ['Fahrenheit',()=>this.props.convertFromFahrenheit(this.props.counterUnit), 'ffh'],\n      'fromCelsius': ['Celsius', ()=>this.props.convertFromCelsius(this.props.counterUnit), 'fcs'],\n      'fromKelvin': ['Kelvin', ()=>this.props.convertFromKelvin(this.props.counterUnit), 'fkn'],\n\n      'toFahrenheit': ['Fahrenheit',()=>this.props.convertToFahrenheit(this.props.counterUnit), 'tfh'],\n      'toCelsius': ['Celsius', ()=>this.props.convertToCelsius(this.props.counterUnit), 'tcs'],\n      'toKelvin': ['Kelvin', ()=>this.props.convertToKelvin(this.props.counterUnit), 'tkn'],\n\n\n      'fromMilligram': ['Milligram',()=> this.props.convertFromMillgram(this.props.counterUnit), 'fmg'],\n      'fromGram': ['Gram', ()=>this.props.convertFromGram(this.props.counterUnit), 'fg'],\n      'fromOunce': ['Ounce', ()=>this.props.convertFromOunce(this.props.counterUnit), 'foz'],\n      'fromPound': ['Pound', ()=>this.props.convertFromPound(this.props.counterUnit), 'flb'],\n      'fromKilogram': ['Kilogram', ()=>this.props.convertFromKilogram(this.props.counterUnit), 'fkg'],\n\n      'toMilligram': ['Milligram', ()=>this.props.convertToMillgram(this.props.counterUnit), 'tmg'],\n      'toGram': ['Gram', ()=>this.props.convertToGram(this.props.counterUnit), 'tg'],\n      'toOunce': ['Ounce', ()=>this.props.convertToOunce(this.props.counterUnit), 'toz'],\n      'toPound': ['Pound', ()=>this.props.convertToPound(this.props.counterUnit), 'tlb'],\n      'toKilogram': ['Kilogram', ()=>this.props.convertToKilogram(this.props.counterUnit), 'tkg']\n    };\n    var classValue = 'content ' + this.props.side;\n\n    return(\n      <div className='dropdown'>\n      <button className='dropdownBtn' > {unitValues[this.props.label][0]} </button>\n    <div className={classValue} >\n      {this.props.choice.map((item,id) => (\n        <div key={unitValues[item][2]} id={unitValues[item][2]} onClick={unitValues[item][1]}>{unitValues[item][0]}</div>\n      ))}\n    </div>\n      </div>\n    );\n  }\n}\n\n// Dispatching actions needed for this component\nconst mapDispatchToProps = (dispatch)=>{\n  return bindActionCreators({\n    convertFromMillimeter: OA.fromMillimeterAction,\n    convertFromCentimeter: OA.fromCentimeterAction,\n    convertFromInch: OA.fromInchAction,\n    convertFromFeet: OA.fromFeetAction,\n    convertFromMeter: OA.fromMeterAction,\n    convertFromKiloMeter: OA.fromKilometerAction,\n\n    convertToMillimeter: OA.toMillimeterAction,\n    convertToCentimeter: OA.toCentimeterAction,\n    convertToInch: OA.toInchAction,\n    convertToFeet: OA.toFeetAction,\n    convertToMeter: OA.toMeterAction,\n    convertToKiloMeter: OA.toKilometerAction,\n\n    convertFromFahrenheit: OA.fromFahrenheitAction,\n    convertFromCelsius: OA.fromCelsiusAction,\n    convertFromKelvin: OA.fromKelvinAction,\n\n    convertToFahrenheit: OA.toFahrenheitAction,\n    convertToCelsius: OA.toCelsiusAction,\n    convertToKelvin: OA.toKelvinAction,\n\n    convertToMillgram: OA.toMilligramAction,\n    convertToGram: OA.toGramAction,\n    convertToOunce: OA.toOunceAction,\n    convertToPound: OA.toPoundAction,\n    convertToKilogram: OA.toKilogramAction,\n\n    convertFromMillgram: OA.fromMilligramAction,\n    convertFromGram: OA.fromGramAction,\n    convertFromOunce: OA.fromOunceAction,\n    convertFromPound: OA.fromPoundAction,\n    convertFromKilogram: OA.fromKilogramAction\n  }, dispatch);\n}\n\n// Connect the component to the store\nexport default connect(null, mapDispatchToProps)(Dropdown);\n","import React from 'react';\nimport Dropdown from './dropdown.js';\nimport {connect} from 'react-redux';\n\n// Container componnent for choosing the convert To unit and the convert From unit\nclass Option extends React.Component {\n  render(){\n    return(\n      <div id='conversion-unit'>\n        <Dropdown {...{label:this.props.fromUnit,\n                       choice: this.props.fromUnitOptions,\n                       counterUnit: this.props.toUnit,\n                       side: 'left'\n                     }}/>\n        <div id='direction'><i className=\"fa fa-arrow-circle-right\" aria-hidden=\"true\"></i>\n</div>\n        <Dropdown {...{label:this.props.toUnit,\n                       choice: this.props.toUnitOptions,\n                       counterUnit: this.props.fromUnit,\n                       side: 'right'\n                     }} />\n      </div>\n    );\n  }\n}\n\n// States from optionReducer to connect to this component\nconst mapStateToProps = (state)=>{\n  return {\n    fromUnit: state.option.fromUnit,\n    toUnit: state.option.toUnit,\n    fromUnitOptions: state.option.fromUnitOptions,\n    toUnitOptions: state.option.toUnitOptions\n  }\n}\n\n// Connect the component to the store\nexport default connect(mapStateToProps, null)(Option);\n","import React from 'react';\nimport {lengthAction, weigthAction, tempAction} from './../actions/unitActions.js';\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\n// Buttons for selecting the units used in conversion\nconst Button = (props)=>{\n  return(\n    <div onClick={props.callback} id={props.id} tabIndex='0' className={props.style}\n     value={props.id}>{props.label} </div>\n  );\n};\n\n// Unit selection component containing 3 buttons for selecting measurement units\nclass Control extends React.Component{\n  render(){\n    var lengthValue = {callback: this.props.selectLength, id:'length',\n                       label:'Length', style: this.props.style[0]};\n    var weightValue = {callback:this.props.selectWeight, id:'weight',\n                       label:'Weight', style: this.props.style[1]};\n    var tempValue =   {callback:  this.props.selectTemp, id:'temperature',\n                       label:'Temperature', style: this.props.style[2]};\n    return(\n      <div id='control'>\n        <Button {...lengthValue}/>\n        <Button {...weightValue}/>\n        <Button {...tempValue}/>\n        </div>\n    );\n  }\n}\n\n// States needed for this component\nconst mapStateToProps = (state)=>{\n  return {\n    style: state.select.unitClass\n  }\n};\n\n// Dispatching actions needed for this component\nconst mapDispatchToProps = (dispatch)=>{\n  return bindActionCreators({\n    selectLength: lengthAction,\n    selectWeight: weigthAction,\n    selectTemp: tempAction\n    }, dispatch);\n};\n\n// Connect the component to the store\nexport  default connect(mapStateToProps,mapDispatchToProps)(Control);\n","import React from 'react';\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {convertAction, resetAction} from './../actions/convertActions.js';\n\n// Container component for conversion input vale and the converted display value\nclass Interact extends React.Component{\n  render(){\n    return(\n      <div id='results'>\n        <div id='begin'>\n          <input id='input' type='text' min='0'  value={this.props.input} onChange={(event)=>this.props.convert(event, this.props.fromUnit,this.props.toUnit)} />\n          <span>{this.props.fromSymbol}</span>\n        </div>\n        <div>\n          <i className=\"fa fa-refresh\" aria-hidden=\"true\" onClick={this.props.reset}></i>\n        </div>\n        <div id='end'>\n          <span> {this.props.toSymbol}</span>\n          <div id='display' >{ this.props.output}</div>\n\n        </div>\n      </div>\n    );\n  }\n}\n\n// States needed for this component\nconst mapStateToProps = (state)=>{\n  return{\n    input: state.convert.input,\n    output: state.convert.output,\n    fromSymbol: state.convert.fromSymbol,\n    toSymbol: state.convert.toSymbol,\n    fromUnit: state.option.fromUnit,\n    toUnit: state.option.toUnit\n  }\n};\n\n// Dispatching actions needed for this component\nconst mapDispatchToProps = (dispatch)=>{\n  return bindActionCreators({\n    convert: convertAction,\n    reset: resetAction\n  },dispatch);\n}\n\n// Connect the component to the store\nexport default connect(mapStateToProps, mapDispatchToProps)(Interact);\n","import React from 'react';\nimport Option from './options.js';\nimport Control from './control.js';\nimport Interact from './interact.js';\n\n// Main application Component\nexport default class Convert extends React.Component{\n  render(){\n    return(\n      <div>\n        <nav >\n          <i className=\"fa fa-rebel\" aria-hidden=\"true\" ></i>\n\n          <span title='by Nial'>\n            <a href='https://github.com/nhope123/converter' target='_blank' rel=\"noopener noreferrer\" title='Github Repository'>\n            Rebel Conversion\n            </a>\n          </span>\n        </nav>\n        <div id='main-container' >\n          <div id='boundary'>\n            <Control />\n            <Option  />\n            <Interact />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport './style/index.scss';\nimport './style/convert.scss';\nimport './style/control.scss';\nimport './style/option.scss';\nimport './style/interact.scss';\nimport ReactDOM from 'react-dom';\nimport {store} from './store/store.js';\nimport { Provider } from 'react-redux';\nimport Convert from './components/convert.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Convert />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}